%option case-insensitive
%option reentrant

/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
*/
u2a            [\xC2-\xDF][\x80-\xBF]
u2b            \xE0[\xA0-\xBF][\x80-\xBF]
u3a            [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}
u3b            \xED[\x80-\x9F][\x80-\xBF]
u4a            \xF0[\x90-\xBF][\x80-\xBF]{2}
u4b            [\xF1-\xF3][\x80-\xBF]{3}
u4c            \xF4[\x80-\x8F][\x80-\xBF]{2}
utf_8          {u2a}|{u2b}|{u3a}|{u3b}|{u4a}|{u4b}|{u4c}

/*
 * Greatly improves parser speed by passing whole phrases instead of chars
*/
word           ({utf_8}|[a-zA-Z0-9])+
phrase         ({utf_8}|[a-zA-Z0-9]|[ ])+([ ]|,|\.|;)

h              [0-9a-f]
nonascii       [\200-\377]
unicode        \\{h}{1,6}[ \t\r\n\f]?
escape         {unicode}|\\[ -~\200-\377]
nmchar         [a-z0-9-]|{nonascii}|{escape}
em1            \*[^\*]*\*
strong1        \*\*[^\*]*\*\*
strongem1      \*\*\*[^\*]*\*\*\*
em2            _[^_]*_
strong2        __[^_]*__
strongem2      ___[^_]*___
bulletstart    ^[-]+[ ]
liststart    	^[0-9]+\.[ ]
blockquote     ^>\n?(.\n|.)*?(\n+|grapedollarXYZ)
codeline       [ ]

email 		[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]+

protocol       (https?|ftps?|git|ssh|svn)\:\/\/
subdomain      {nmchar}+\.
urlpath        [\/]|{nmchar}+
protourl       {protocol}[^ \n]+
optprotourl    {protocol}?{subdomain}*{nmchar}+\.[a-zA-Z]+{urlpath}*?
href           \[(\\\[|[^\[])+\]\(([^\)]+)\)

em             {em1}|{em2}
strong         {strong1}|{strong2}
strongem       {strongem1}|{strongem2}
strikethrough  ~~.*?~~
codeblock	```([^`]+|\n|``?[^`])*```
codespan       `[^`]*`

url            {protourl}|{optprotourl}

w              [ \t\r\n\f]*
nl             \n|\r\n|\r|\f

%%

{em}                            {xng_markdown_consume(yytext, MARKDOWN_EM, yyscanner);}
{strong}                        {xng_markdown_consume(yytext, MARKDOWN_STRONG, yyscanner);}
{strongem}                      {xng_markdown_consume(yytext, MARKDOWN_STRONGEM, yyscanner);}
{strikethrough}                 {xng_markdown_consume(yytext, MARKDOWN_STRIKETHROUGH, yyscanner);}
{codeblock}                     {xng_markdown_consume(yytext, MARKDOWN_CODEBLOCK, yyscanner);}
{codespan}                      {xng_markdown_consume(yytext, MARKDOWN_CODESPAN, yyscanner);}
{email} 			  {xng_markdown_consume(yytext, MARKDOWN_EMAIL, yyscanner);}
{url}                           {xng_markdown_consume(yytext, MARKDOWN_URL, yyscanner);}
{href}                          {xng_markdown_consume(yytext, MARKDOWN_HREF, yyscanner);}
{bulletstart}                   {xng_markdown_consume(yytext, MARKDOWN_BULLETSTART, yyscanner);}
{blockquote}                    {xng_markdown_consume(yytext, MARKDOWN_BLOCKQUOTE, yyscanner);}

{phrase}                        {xng_markdown_consume(yytext, MARKDOWN_PHRASE, yyscanner);}
{word}                          {xng_markdown_consume(yytext, MARKDOWN_WORD, yyscanner);}
[ ]{2,}$                        {xng_markdown_consume(yytext, MARKDOWN_NEWLINE, yyscanner);}
[\n]{2,}                        {xng_markdown_consume(yytext, MARKDOWN_PARAGRAPH, yyscanner);}
[\n\t\f]+                       {xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
{utf_8}*                        {xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
.                               {xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}

%%

int xng_markdownwrap(yyscan_t yyscanner){return 1;}
